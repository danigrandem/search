{"ast":null,"code":"var _jsxFileName = \"/Users/kxbf040/Development/codeTest/series-search-starter/src/screens/SearchScreen.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { searchShows } from '../api/apiService'; // Ensure the path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Adjust based on your directory structure\n\nconst SearchScreen = () => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleSearch = () => {\n    if (!query.trim()) return; // Prevent empty queries\n    setLoading(true);\n    setError(null);\n    searchShows(query).then(data => {\n      // Map API response to the desired structure, e.g., extracting the name and id\n      const formattedResults = data.map(item => ({\n        id: item.show.id,\n        name: item.show.name\n      }));\n      setResults(formattedResults);\n    }).catch(err => {\n      setError('Error fetching shows. Please try again later.');\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search Shows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter show name\",\n      value: query,\n      onChange: e => setQuery(e.target.value),\n      style: {\n        marginRight: '10px',\n        padding: '5px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      style: {\n        padding: '5px'\n      },\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: results.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchScreen, \"JIxndLGSTRC9MxvOlSH5iLtF6UU=\");\n_c = SearchScreen;\nexport default SearchScreen;\nvar _c;\n$RefreshReg$(_c, \"SearchScreen\");","map":{"version":3,"names":["React","useState","searchShows","jsxDEV","_jsxDEV","SearchScreen","_s","query","setQuery","results","setResults","loading","setLoading","error","setError","handleSearch","trim","then","data","formattedResults","map","item","id","show","name","catch","err","finally","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","marginRight","onClick","color","_c","$RefreshReg$"],"sources":["/Users/kxbf040/Development/codeTest/series-search-starter/src/screens/SearchScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { searchShows } from '../api/apiService'; // Ensure the path is correct\nimport { Show, SearchResult } from '../types/apiTypes'; // Adjust based on your directory structure\n\nconst SearchScreen: React.FC = () => {\n    const [query, setQuery] = useState<string>('');\n    const [results, setResults] = useState<Show[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const handleSearch = () => {\n        if (!query.trim()) return; // Prevent empty queries\n        setLoading(true);\n        setError(null);\n\n        searchShows(query)\n            .then((data: SearchResult[]) => {\n                // Map API response to the desired structure, e.g., extracting the name and id\n                const formattedResults = data.map(item => ({\n                    id: item.show.id,\n                    name: item.show.name,\n                }));\n                setResults(formattedResults);\n            })\n            .catch(err => {\n                setError('Error fetching shows. Please try again later.');\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    };\n\n    return (\n        <div style={{ padding: '20px' }}>\n            <h1>Search Shows</h1>\n            <input\n                type=\"text\"\n                placeholder=\"Enter show name\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                style={{ marginRight: '10px', padding: '5px' }}\n            />\n            <button onClick={handleSearch} style={{ padding: '5px' }}>Search</button>\n            {loading && <div>Loading...</div>}\n            {error && <div style={{ color: 'red' }}>{error}</div>}\n            <ul>\n                {results.map(item => (\n                    <li key={item.id}>{item.name}</li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default SearchScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}